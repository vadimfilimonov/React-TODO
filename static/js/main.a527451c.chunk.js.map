{"version":3,"sources":["components/Task.jsx","components/TaskAdd.jsx","App.jsx","index.jsx"],"names":["Task","task","onToggleTask","onDeleteTask","ListItem","button","onClick","ListItemIcon","done","CheckBoxOutlined","CheckBoxOutlineBlankOutlined","ListItemText","primary","title","style","textDecoration","ListItemSecondaryAction","IconButton","edge","aria-label","Delete","TaskAdd","onAddTask","useState","value","setValue","display","onSubmit","event","preventDefault","TextField","flexGrow","variant","label","onChange","target","Button","color","type","startIcon","disabled","length","saveTasksToLocalStorage","tasks","stringifiedTasks","JSON","stringify","localStorage","setItem","App","predefinedTasks","savedTasks","getItem","parse","extractTasksFromLocalStorage","setTasks","useEffect","console","error","Container","maxWidth","Typography","component","newTasks","id","uniqueId","List","map","Error","filter","handleDeleteTask","render","StrictMode","config","accessToken","environment","process","ErrorBoundary","document","getElementById"],"mappings":"qTAiBeA,EAZF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,aAAvB,OACX,eAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,QAASJ,EAA1B,UACE,cAACK,EAAA,EAAD,UAAeN,EAAKO,KAAO,cAACC,EAAA,EAAD,IAAuB,cAACC,EAAA,EAAD,MAClD,cAACC,EAAA,EAAD,CAAcC,QAASX,EAAKY,MAAOC,MAAO,CAAEC,eAAgBd,EAAKO,KAAO,eAAiB,UACzF,cAACQ,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,KAAK,MAAMC,aAAW,SAASb,QAASH,EAApD,SACE,cAACiB,EAAA,EAAD,Y,mCCuBOC,EA7BC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACPC,mBAAS,IADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAajC,OACE,uBAAMX,MAAO,CAAEY,QAAS,QAAUC,SAXf,SAACC,GACpBA,EAAMC,iBACNP,EAAUE,GACVC,EAAS,KAQT,UACE,cAACK,EAAA,EAAD,CACEhB,MAAO,CAAEiB,SAAU,GACnBC,QAAQ,WACRC,MAAM,yBACNT,MAAOA,EACPU,SAXe,SAACN,GACpBH,EAASG,EAAMO,OAAOX,UAYpB,cAACY,EAAA,EAAD,CAAQJ,QAAQ,YAAYK,MAAM,UAAUC,KAAK,SAASC,UAAW,cAAC,IAAD,IAAcC,SAA2B,IAAjBhB,EAAMiB,OAAnG,qBCfAC,EAA0B,SAACC,GAC/B,IAAMC,EAAmBC,KAAKC,UAAUH,GACxCI,aAAaC,QAAQ,kBAAmBJ,IA2D3BK,EAxDH,WACV,IAAMC,EAX6B,WACnC,IAAMC,EAAaJ,aAAaK,QAAQ,mBACxC,OAAOP,KAAKQ,MAAMF,IAAe,GASTG,GADR,EAEU/B,mBAAS2B,GAFnB,mBAETP,EAFS,KAEFY,EAFE,KAIhBC,qBAAU,WACRC,QAAQC,MAAM,oCACb,IA8BH,OACE,eAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAACC,EAAA,EAAD,CAAY7B,QAAQ,KAAK8B,UAAU,KAAnC,mBAGA,cAAC,EAAD,CAASxC,UAjCS,SAACT,GACrB,IAKMkD,EAAQ,CALE,CACdC,GAAIC,MACJpD,QACAL,MAAM,IAEM,mBAAgBmC,IAC9BY,EAASQ,GACTrB,EAAwBqB,MA0BtB,cAACG,EAAA,EAAD,UACGvB,EAAMwB,KAAI,SAAClE,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,EACNC,cA5BgB8D,EA4Be/D,EAAK+D,GA5Bb,WAC/B,IAAMD,EAAWpB,EAAMwB,KAAI,SAAClE,GAAD,mBAAC,eACvBA,GADsB,IAEzBO,KAAMP,EAAK+D,KAAOA,GAAM/D,EAAKO,KAAOP,EAAKO,UAK3C,MAHA+C,EAASQ,GACTrB,EAAwBqB,GAElB,IAAIK,MAAM,4BAqBRjE,aAAc,kBAlBC,SAAC6D,GACxB,IAAMD,EAAWpB,EAAM0B,QAAO,SAACpE,GAAD,OAAUA,EAAK+D,KAAOA,KACpDT,EAASQ,GACTrB,EAAwBqB,GAeIO,CAAiBrE,EAAK+D,MAHrC/D,EAAK+D,IA1BK,IAACA,WCzB5BO,iBACE,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,OAPQ,CACpBC,YAAa,mCACbC,YAAaC,cAKX,SACE,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.a527451c.chunk.js","sourcesContent":["// @ts-check\nimport React from 'react';\nimport { ListItem, ListItemIcon, ListItemText, ListItemSecondaryAction, IconButton } from '@material-ui/core';\nimport { CheckBoxOutlineBlankOutlined, CheckBoxOutlined, Delete } from '@material-ui/icons';\n\nconst Task = ({ task, onToggleTask, onDeleteTask }) => (\n  <ListItem button onClick={onToggleTask}>\n    <ListItemIcon>{task.done ? <CheckBoxOutlined /> : <CheckBoxOutlineBlankOutlined />}</ListItemIcon>\n    <ListItemText primary={task.title} style={{ textDecoration: task.done ? 'line-through' : 'none' }} />\n    <ListItemSecondaryAction>\n      <IconButton edge=\"end\" aria-label=\"delete\" onClick={onDeleteTask}>\n        <Delete />\n      </IconButton>\n    </ListItemSecondaryAction>\n  </ListItem>\n);\n\nexport default Task;\n","// @ts-check\nimport React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst TaskAdd = ({ onAddTask }) => {\n  const [value, setValue] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onAddTask(value);\n    setValue('');\n  };\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <form style={{ display: 'flex' }} onSubmit={handleSubmit}>\n      <TextField\n        style={{ flexGrow: 1 }}\n        variant=\"outlined\"\n        label=\"What needs to be done?\"\n        value={value}\n        onChange={handleChange}\n      />\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\" startIcon={<SaveIcon />} disabled={value.length === 0}>\n        Add\n      </Button>\n    </form>\n  );\n};\n\nexport default TaskAdd;\n","// @ts-check\nimport React, { useEffect, useState } from 'react';\nimport { Container, Typography, List } from '@material-ui/core';\nimport uniqueId from 'lodash.uniqueid';\nimport Task from './components/Task';\nimport TaskAdd from './components/TaskAdd';\n\nconst extractTasksFromLocalStorage = () => {\n  const savedTasks = localStorage.getItem('predefinedTasks');\n  return JSON.parse(savedTasks) || [];\n};\n\nconst saveTasksToLocalStorage = (tasks) => {\n  const stringifiedTasks = JSON.stringify(tasks);\n  localStorage.setItem('predefinedTasks', stringifiedTasks);\n};\n\nconst App = () => {\n  const predefinedTasks = extractTasksFromLocalStorage();\n  const [tasks, setTasks] = useState(predefinedTasks);\n\n  useEffect(() => {\n    console.error('Test rollbar via console error');\n  }, []);\n\n  const handleAddTask = (title) => {\n    const newTask = {\n      id: uniqueId(), // FIXME: uniqueId doesn't know about existing ids\n      title,\n      done: false,\n    };\n    const newTasks = [newTask, ...tasks];\n    setTasks(newTasks);\n    saveTasksToLocalStorage(newTasks);\n  };\n\n  const handleToggleTask = (id) => () => {\n    const newTasks = tasks.map((task) => ({\n      ...task,\n      done: task.id === id ? !task.done : task.done,\n    }));\n    setTasks(newTasks);\n    saveTasksToLocalStorage(newTasks);\n    // TODO: delete after tests\n    throw new Error('Test rollbar via throw');\n  };\n\n  const handleDeleteTask = (id) => {\n    const newTasks = tasks.filter((task) => task.id !== id);\n    setTasks(newTasks);\n    saveTasksToLocalStorage(newTasks);\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Typography variant=\"h1\" component=\"h1\">\n        todos\n      </Typography>\n      <TaskAdd onAddTask={handleAddTask} />\n      <List>\n        {tasks.map((task) => (\n          <Task\n            key={task.id}\n            task={task}\n            onToggleTask={handleToggleTask(task.id)}\n            onDeleteTask={() => handleDeleteTask(task.id)}\n          />\n        ))}\n      </List>\n    </Container>\n  );\n};\n\nexport default App;\n","// @ts-check\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider, ErrorBoundary } from '@rollbar/react';\nimport App from './App';\n\nconst rollbarConfig = {\n  accessToken: 'c5866796eedd46819ea8740fb8173e94',\n  environment: process.env.NODE_ENV,\n};\n\nrender(\n  <React.StrictMode>\n    <Provider config={rollbarConfig}>\n      <ErrorBoundary>\n        <App />\n      </ErrorBoundary>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}